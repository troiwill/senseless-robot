#! /usr/bin/env python3

import copy
import traceback

from geometry_msgs.msg import Twist, PoseWithCovariance
from nav_msgs.msg import Odometry
import numpy as np
from numpy.typing import ArrayLike
import rospy
from senseless_robot.filters.ekf import ExtendedKalmanFilter2D
import tf
from threading import Lock


class SimulatedMotionNode:
    def __init__(self) -> None:
        # Gather the ROS parameters.
        rospy.logdebug("Gathering the ROS parameters.")
        sim_odom_topic = rospy.get_param("sim_odom_topic")
        sim_velocity_cmd_topic = rospy.get_param("sim_velocity_cmd_topic")
        sim_odom_frame = rospy.get_param("sim_odom_frame")
        sim_robot_base_frame = rospy.get_param("sim_robot_base_frame")
        sim_set_pose_topic = rospy.get_param("sim_set_pose_topic")

        # Get the private parameters if available.
        rospy.logdebug("Gathering the private parameters.")
        x_pos = float(rospy.get_param("~x_pos", 0.0))
        y_pos = float(rospy.get_param("~y_pos", 0.0))
        yaw = float(rospy.get_param("~yaw", 0.0))

        # Sanity checks.
        assert isinstance(sim_odom_topic, str)
        assert isinstance(sim_velocity_cmd_topic, str)
        assert isinstance(sim_odom_frame, str)
        assert isinstance(sim_robot_base_frame, str)
        assert isinstance(sim_set_pose_topic, str)

        # Control access to the EKF and message.
        rospy.logdebug("Setting up locks.")
        self._ekf_lock = Lock()
        self._odom_lock = Lock()

        # Initialize the EKF.
        rospy.logdebug("Initializing the EKF.")
        self._init_ekf(x0=[x_pos, y_pos, yaw], P0=np.diag([1.0, 1.0, np.radians(5.0)]), Q=np.diag([0.05, 0.05, 0.06]))
        rospy.sleep(0.1)

        # Initialize the odometry message.
        rospy.logdebug("Initializing the odometry message.")
        self._init_message(sim_odom_frame=sim_odom_frame, sim_robot_frame=sim_robot_base_frame)
        rospy.sleep(0.1)

        # Update odometry message.
        rospy.logdebug("Updating the odom message.")
        self._update_message(belief=self._ekf.belief, twist=Twist())

        rospy.logdebug("Setting up the rest of the internal variables.")
        # Skips commands with delta time greater than 1.0.
        self._skip_command_thres = 1.0
        self._last_command_time = rospy.get_rostime()

        # Topic used to publish the messages.
        self._odom_pub = rospy.Publisher(sim_odom_topic, Odometry, queue_size=3)
        self._pub_rate = rospy.Rate(30.0)
        self._odom_tf = tf.TransformBroadcaster()
        self._last_publish_tf_time = rospy.get_rostime()

        # Topic used to subscribe to the velocity and pose set messages.
        self.vel_cmd_sub = rospy.Subscriber(sim_velocity_cmd_topic, Twist, self.velocity_command_callback, queue_size=50)
        self.set_pose_sub = rospy.Subscriber(sim_set_pose_topic, Odometry, self.set_odom_callback, queue_size=3)

    def _init_ekf(self, x0: ArrayLike, P0: ArrayLike, Q: ArrayLike) -> None:
        self._ekf = ExtendedKalmanFilter2D()
        self._ekf.set_belief_2D(pose2D=x0, P_2D=P0)
        self._ekf.Q = Q

    def _init_message(self, sim_odom_frame: str, sim_robot_frame: str) -> None:
        # Sequence number
        self._seq_n = 0

        # Init odometry.
        self._odom_msg = Odometry()
        self._odom_msg.header.frame_id = "map"
        self._odom_msg.child_frame_id = sim_robot_frame

        self._odom_msg.pose.pose.position.x = 0.0
        self._odom_msg.pose.pose.position.y = 0.0
        self._odom_msg.pose.pose.position.z = 0.0

        self._odom_msg.pose.pose.orientation.x = 0.0
        self._odom_msg.pose.pose.orientation.y = 0.0
        self._odom_msg.pose.pose.orientation.z = 0.0
        self._odom_msg.pose.pose.orientation.w = 0.0

        self._odom_msg.pose.covariance = np.zeros((36,)).tolist()

        self._odom_msg.twist.twist.linear.x = 0.0
        self._odom_msg.twist.twist.linear.y = 0.0
        self._odom_msg.twist.twist.linear.z = 0.0
        self._odom_msg.twist.twist.angular.x = 0.0
        self._odom_msg.twist.twist.angular.y = 0.0
        self._odom_msg.twist.twist.angular.z = 0.0

        self._odom_msg.twist.covariance = np.zeros((36,)).tolist()

    def _update_message(self, belief: PoseWithCovariance, twist: Twist) -> None:
        with self._odom_lock:
            # Only update the values for the belief and twist, not the header.
            self._odom_msg.pose = copy.deepcopy(belief)
            self._odom_msg.twist.twist = copy.deepcopy(twist)

    def publish(self) -> None:
        _odom_copy = None
        with self._odom_lock:
            _odom_copy = copy.deepcopy(self._odom_msg)

        # Get current time and update sequence number.
        current_time = rospy.get_rostime()
        self._seq_n += 1

        # Update the timestamp and sequence number.
        _odom_copy.header.seq = self._seq_n
        _odom_copy.header.stamp = current_time

        # Publish the message.
        self._odom_pub.publish(_odom_copy)

        # Check if we should publish the transform again.
        if (current_time - self._last_publish_tf_time).to_sec() > 0.0:
            self._last_publish_tf_time = current_time

            position = _odom_copy.pose.pose.position
            orientation = _odom_copy.pose.pose.orientation
            self._odom_tf.sendTransform(
                translation=(position.x, position.y, position.z),
                rotation=(orientation.x, orientation.y, orientation.z, orientation.w),
                time=_odom_copy.header.stamp,
                child=_odom_copy.child_frame_id,
                parent=_odom_copy.header.frame_id,
            )

    def set_odom_callback(self, odom_msg: Odometry) -> None:
        belief = None
        with self._ekf_lock:
            # Update the EKF.
            self._ekf.set_belief_from_message(odom_msg.pose)
            belief = self._ekf.belief

        self._update_message(belief=belief, twist=odom_msg.twist.twist)

    def spin(self) -> None:
        while not rospy.is_shutdown():
            self.publish()
            self._pub_rate.sleep()

    def velocity_command_callback(self, vel_cmd: Twist) -> None:
        """
        Callback function that computes odometry in a typical way given the velocities of the
        robot.

        Parameters
        ----------
        vel_cmd : Twist
            The twist command to execute.
        """
        with self._ekf_lock:
            # Check if time between this and the last command.
            current_time = rospy.get_rostime()
            dt = (current_time - self._last_command_time).to_sec()
            self._last_command_time = current_time

            rospy.logdebug(f"dt = {dt}")
            if dt < self._skip_command_thres:
                # Propagate the belief.
                self._ekf.predict(u=np.array([vel_cmd.linear.x, vel_cmd.angular.z]), dt=dt)
                belief = self._ekf.belief

                # Update the messages.
                self._update_message(belief=belief, twist=vel_cmd)


if __name__ == "__main__":
    rospy.init_node("simulated_motion_node", anonymous=True, log_level=rospy.DEBUG)
    rospy.sleep(0.5)
    try:
        SimulatedMotionNode().spin()
    except:
        rospy.logerr(
                        f"An error occurred:\n{traceback.format_exc()}"
                    )
