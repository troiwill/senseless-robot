#! /usr/bin/env python3

from gazebo_msgs.msg._ModelStates import ModelStates
from geometry_msgs.msg._PoseWithCovarianceStamped import PoseWithCovarianceStamped
import numpy as np
import rospy


class TruePosePublisher:
    SOURCE_GAZEBO = "gazebo"

    def __init__(
        self, model_name: str, true_pose_source: str, measurement_from_viewer_topic: str
    ) -> None:
        assert isinstance(model_name, str)
        assert model_name != ""
        assert isinstance(true_pose_source, str)
        assert isinstance(measurement_from_viewer_topic, str)

        if true_pose_source == TruePosePublisher.SOURCE_GAZEBO:
            sub_topic = "/gazebo/model_states"
            sub_msg_type = ModelStates
            sub_callback = self.gazebo_model_states_callback

        else:
            raise ValueError(
                f"Unknown recognized true pose source: {true_pose_source}."
            )

        self.model_name = model_name
        self.sub = rospy.Subscriber(sub_topic, sub_msg_type, sub_callback)
        self.pub = rospy.Publisher(
            measurement_from_viewer_topic, PoseWithCovarianceStamped, queue_size=1
        )

    def gazebo_model_states_callback(self, msg: ModelStates) -> None:
        pose_msg = PoseWithCovarianceStamped()
        pose_msg.header.frame_id = "map"
        pose_msg.header.stamp = rospy.get_rostime()

        try:
            true_pose = msg.pose[msg.name.index(self.model_name)]
            covar = np.eye(6) * 0.0001
            pose_msg.pose.pose = true_pose
            pose_msg.pose.covariance = covar.flatten().tolist()

        except:
            rospy.logerr(f"Could not create pose message for model {self.model_name}.")
            return None

        self.pub.publish(pose_msg)


def main():
    rospy.init_node("true_pose_node", anonymous=True, log_level=rospy.DEBUG)

    model_name = rospy.get_param("model_name", "turtlebot3_senseless_waffle")
    true_pose_source = rospy.get_param("true_pose_source", "gazebo")
    measurement_from_viewer_topic = rospy.get_param("measurement_from_viewer_topic")

    true_pose_publisher = TruePosePublisher(
        model_name=model_name,
        true_pose_source=true_pose_source,
        measurement_from_viewer_topic=measurement_from_viewer_topic,
    )
    rospy.spin()


if __name__ == "__main__":
    main()
